# ==============================================================================
# This is not part of the server! This is how the nginx.conf in the nginx/conf
# file should look like after u install nginx
# ==============================================================================

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    include       naxsi_core.rules;
    
    load_module "modules/ngx_http_naxsi_module.dll";


    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for" "$http_x_real_ip;"';

    access_log  logs/access.log  main;
    # set_real_ip_from 127.0.0.1;
    # real_ip_header X-Forwarded-For;
    
    # Set the real IP header to X-Real-IP
    real_ip_header X-Real-IP;

    sendfile        on;
    tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # # Define a cache zone named "myCache" with a maximum size of 100 MB
    # proxy_cache_path /var/cache/nginx/myCache levels=1:2 keys_zone=myCache:10m max_size=100m inactive=60m;



    upstream myServers {
        # This method ensures that the requests from the same client will always
        # be directed to the same server except when this server is unavailable.
        ip_hash;
        # Unequal distribution: If u want unequal distribution of traffic, u can change the weight to 2 
        # for instance in one of the servers and it will get 2 request for every 1
        # request the server with weight=1 will get.

        # Health checks:
        # Passive: The max_fails directive sets the number of consecutive
        # unsuccessful attempts to communicate with the server that should happen
        # during fail_timeout. By default, max_fails is set to 1. When it is set
        # to 0, health checks are disabled for this server. The fail_timeout
        # parameter also defines how long the server will be marked as failed.
        # After fail_timeout interval following the server failure, nginx will
        # start to gracefully probe the server with the live clientâ€™s requests.
        # If the probes have been successful, the server is marked as a live one.
        # Active: sends periodically GET request to check the servers - supported
        # only in nginx+ which cost money. 

        server localhost:8081 weight=1 max_fails=2 fail_timeout=30s;
        server localhost:8082 weight=1 max_fails=2 fail_timeout=30s;

        # Create a common shared table in memory, So they can share data that will
        # save time like if one server is down all the servers will know not to
        # send request for now. 
        zone myServers 64k;

    }

    server {
        listen       8080;
        listen       [::]:8080;
        server_name  localhost;

        #charset koi8-r;

        # access_log  logs/host.access.log  main;

        location / {
            # # Cache responses for up to 5 minutes
            # proxy_cache_valid 5m;

            # # Use the "myCache" cache zone for this location
            # proxy_cache myCache;

            # # Use the URL as the cache key
            # proxy_cache_key "$scheme$request_method$host$request_uri";

            proxy_pass   http://myServers;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
            include naxsi.rules;

            # proxy_set_header X-Real-IP $remote_addr;
            # Set the X-Forwarded-For header to the client IP address
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # expires 1h;

        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
